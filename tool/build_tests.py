import pathlib

import black
import isort


def build_tests():
    p = pathlib.Path("tests").resolve()
    for path in p.glob("*.lox"):
        print(path)
    for d in [x for x in p.iterdir() if x.is_dir()]:
        path = p / d.name / f"test_{d.name}.py"
        with open(path, "w") as f:
            f.write("import subprocess\n\n")
            f.write("EXPECT_FAIL_65 = [\n")
            f.write("    'prefix_operator',\n")
            f.write("    'grouping',\n")
            f.write("    'infix_operator',\n")
            f.write("    'to_this',\n")
            f.write("    'inherit_self',\n")
            f.write("    'local_inherit_self',\n")
            f.write("    'return_value',\n")
            f.write("    'parenthesized_superclass',\n")
            f.write("    'missing_argument',\n")
            f.write("    'var_in_body',\n")
            f.write("    'fun_in_body',\n")
            f.write("    'class_in_body',\n")
            f.write("    'trailing_dot',\n")
            f.write("    'leading_dot',\n")
            f.write("    'decimal_point_at_eof',\n")
            f.write("    'use_nil_as_var',\n")
            f.write("    'use_local_in_initializer',\n")
            f.write("    'use_this_as_var',\n")
            f.write("    'duplicate_local',\n")
            f.write("    'duplicate_parameter',\n")
            f.write("    'collide_with_parameter',\n")
            f.write("    'use_false_as_var',\n")
            f.write("    'unterminated',\n")
            f.write("    'parenthesized',\n")
            f.write("    'no_superclass_bind',\n")
            f.write("    'super_without_dot',\n")
            f.write("    'super_at_top_level',\n")
            f.write("    'no_reuse_constants',\n")
            f.write("    'super_without_name',\n")
            f.write("    'no_superclass_call',\n")
            f.write("    'super_in_top_level_function',\n")
            f.write("    'too_many_constants',\n")
            f.write("    'too_many_upvalues',\n")
            f.write("    'too_many_locals',\n")
            f.write("    'loop_too_large',\n")
            f.write("    'trees',\n")
            f.write("    'this_at_top_level',\n")
            f.write("    'this_in_top_level_function',\n")
            f.write("    'statement_initializer',\n")
            f.write("    'statement_increment',\n")
            f.write("    'statement_condition',\n")
            f.write("    'gunexpected_character',\n")
            f.write("    'too_many_arguments',\n")
            f.write("    'too_many_parameters',\n")
            f.write("    'missing_comma_in_parameters',\n")
            f.write("    'fun_in_then',\n")
            f.write("    'fun_in_else',\n")
            f.write("    'var_in_else',\n")
            f.write("    'class_in_then',\n")
            f.write("    'body_must_be_block',\n")
            f.write("    'class_in_else',\n")
            f.write("    'var_in_then',\n")
            f.write("    'at_top_level',\n")
            f.write("]\n")
            f.write("EXPECT_FAIL_70 = [\n")
            f.write("    'undefined',\n")
            f.write("    'object',\n")
            f.write("    'bool',\n")
            f.write("    'nil',\n")
            f.write("    'string',\n")
            f.write("    'num',\n")
            f.write("    'extra_arguments',\n")
            f.write("    'missing_arguments',\n")
            f.write("    'default_arguments',\n")
            f.write("    'get_on_string',\n")
            f.write("    'no_superclass_method',\n")
            f.write("    'error_after_multiline',\n")
            f.write("    'undefined_local',\n")
            f.write("    'undefined_global',\n")
            f.write("    'less_nonnum_num',\n")
            f.write("    'multiply_num_nonnum',\n")
            f.write("    'add_bool_num',\n")
            f.write("    'add_bool_nil',\n")
            f.write("    'greater_or_equal_num_nonnum',\n")
            f.write("    'greater_or_equal_nonnum_num',\n")
            f.write("    'less_num_nonnum',\n")
            f.write("    'add_nil_nil',\n")
            f.write("    'less_or_equal_nonnum_num',\n")
            f.write("    'negate_nonnum',\n")
            f.write("    'less_or_equal_num_nonnum',\n")
            f.write("    'add_bool_string',\n")
            f.write("    'subtract_num_nonnum',\n")
            f.write("    'multiply_nonnum_num',\n")
            f.write("    'add_string_nil',\n")
            f.write("    'subtract_nonnum_num',\n")
            f.write("    'divide_num_nonnum',\n")
            f.write("    'add_num_nil',\n")
            f.write("    'divide_nonnum_num',\n")
            f.write("    'greater_num_nonnum',\n")
            f.write("    'greater_nonnum_num',\n")
            f.write("    'inherit_from_function',\n")
            f.write("    'refer_to_name',\n")
            f.write("    'local_mutual_recursion',\n")
            f.write("    'not_found',\n")
            f.write("    'stack_overflow',\n")
            f.write("    'inherit_from_number',\n")
            f.write("    'inherit_from_nil',\n")
            f.write("    'set_on_class',\n")
            f.write("    'get_on_function',\n")
            f.write("    'call_nonfunction_field',\n")
            f.write("    'get_on_nil',\n")
            f.write("    'set_on_num',\n")
            f.write("    'set_on_string',\n")
            f.write("    'get_on_bool',\n")
            f.write("    'get_on_class',\n")
            f.write("    'set_on_bool',\n")
            f.write("    'set_evaluation_order',\n")
            f.write("    'get_on_num',\n")
            f.write("    'set_on_nil',\n")
            f.write("    'set_on_function',\n")
            f.write("]\n\n\n")

            for path in p.glob(f"{d.name}/*.lox"):
                # if d.name == "benchmark":
                #     continue
                f.write(f"def test_{path.stem}():\n")
                f.write(f"    test_file = '{path}'  # noqa: E501\n")
                f.write("    resultp = subprocess.run(")
                f.write("['python3', 'lox.py', test_file], capture_output=True)\n")
                f.write("    resultj = subprocess.run(")
                f.write(
                    "['../craftinginterpreters/jlox', test_file], capture_output=True)\n"  # noqa: E501
                )
                f.write("    assert resultp.returncode == resultj.returncode\n")
                # f.write(f"    if '{path.stem}' in EXPECT_FAIL_65:\n")
                # f.write("        assert result.returncode == 65\n")
                # f.write(f"    elif '{path.stem}' in EXPECT_FAIL_70:\n")
                # f.write("        assert result.returncode == 70\n")
                # f.write("    else:\n")
                # f.write("        assert result.returncode == 0\n\n\n")
                f.write("\n\n")
            f.truncate(f.tell() - 2)


def format(path):
    black.format_file_in_place(
        src=path,
        fast=False,
        mode=black.Mode(target_versions={black.TargetVersion.PY38}),
        write_back=black.WriteBack.YES,
    )
    isort.file(path)


if __name__ == "__main__":
    build_tests()
